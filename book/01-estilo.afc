[chapter Como escrever um livro para a Casa do Código?]

Atenção: Mais importante que usar o sistema da casa do código para escrever o seu livro na integração contínua, é escrever um bom livro! Leia este capítulo com atenção.

[section Defina muito bem seu público alvo]

Um dos pontos principais do seu livro é conhecer o público alvo. Você deve definir qual é o nível de conhecimento que ele possui. É para quem nunca ouvi falar da tecnologia? Ou para quem já está trabalhando, mas não teve uma educação formal no assunto? Apenas para quem já conhece muito da tecnologia? Seja qual for, você deve respeitar esse perfil, lembrando disso durante todo o livro.

É claro que, se o livro for para alguém que esteja começando ou mesmo intermediário, você pode sim adicionar alguns capítulos finais que sejam desafiadores, de assuntos mais específicos e aprofundados. Ou se seu livro é para um público mais avançado, também vale comentar aspectos básicos como revisão sempre que der.

Em especial, saiba dizer se seu livro é para quem não conhece absolutamente nada da tecnologia, ou se é para alguém que começou a trabalhar com ela. Se for para quem já tabalha com ela, você pode ir um pouco mais rápido em alguns pontos.

[section Mostre primeiro os problemas, depois as soluções, evitando definições]

No começo de um capítulo ou de uma seção, é muito importante motivar o que será apresentado. Definições devem ser evitadas nesse começo. Um exemplo seria como apresentar o conceito de herança. Veja como ela é definida de forma enciclopédica na wikipedia:

"::Inheritance is a way to reuse code of existing objects, or to establish a subtype from an existing object, or both, depending upon programming language support. In classical inheritance where objects are defined by classes, classes can inherit attributes and behavior from pre-existing classes called base classes, superclasses, parent classes or ancestor classes.::"

Apesar de correto, o texto fica perdido, sem um guia, sem um porquê. Repare agora na descrição mais detalhada, que vai, ao final, mostrar a necessidade da herança:

::Como toda empresa, nosso Banco possui funcionários. Vamos modelar a classe %%Funcionario%%::

[code java]
	class Funcionario {
		String nome;
		String cpf;
		double salario;
		 // métodos devem vir aqui
	}
[/code]

::Além de um funcionário comum, há também outros cargos, como os gerentes. Os gerentes guardam a mesma 
informação que um funcionário comum, mas possuem outras informações, além de ter funcionalidades um 
pouco diferentes. Um gerente no nosso banco possui também uma senha numérica que permite o acesso ao 
sistema interno do banco, além do número de funcionários que ele gerencia::

[code java]
class Gerente {
	String nome;
	String cpf;
	double salario;
	int senha;
	int numeroDeFuncionariosGerenciados;
		
	public boolean autentica(int senha) {
		// ...
	}
}
[/code]

::Se tivéssemos um outro tipo de funcionário que tem características diferentes do funcionário comum, 
precisaríamos criar uma outra classe e copiar o código novamente!

Além disso, se um dia precisarmos adicionar uma nova informação para todos os funcionários, 
precisaremos passar por todas as classes de funcionário e adicionar esse atributo. 
O problema acontece novamente por não centralizarmos as informações principais do funcionário em um 
único lugar!

Existe um jeito, em Java, de relacionarmos uma classe de tal maneira que uma delas **herda** tudo que 
a outra tem. Isto é uma relação de classe mãe e classe filha. No nosso caso, gostaríamos de fazer com 
que o %%Gerente%% tivesse tudo que um %%Funcionario%% tem, gostaríamos que ela fosse uma **extensão** 
de %%Funcionario%%. Fazemos isto através da palavra chave %%extends%%.::

Conceitos precisam ser sempre apresentados de forma a motivar o leitor. Eles precisam aparecer só depois que um problema surgiu. Esse é o segredo de uma leitura fluída: primeiro o problema, e só depois a solução. A definição pode sumarizar tudo isso, opcionalmente.

É claro que há exceções, em especial quando for apresentar detalhes pequenos de uma API.

[section Evite assustar as pessoas com códigos longos ou inesperados]

Mesmo quando um código a ser apresentado é pequeno, não devemos jogá-lo para depois explicá-lo. Repare neste exemplo:

::Vamos então acessar os serviços da amazon S3. Crie uma classe %%ConectorDoS3%% com o seguinte código:::

[code java]
class ConectorDoS3 {
	public static void main(String ... args) {
		// puxa as credenciais do arquivo AwsCredentials.properties
		InputStream credentials = ConectorDoS3.class.
				getResourceAsStream("AwsCredentials.properties");
		PropertiesCredentials awsCredentials = 
				new PropertiesCredentials(credentials);		
		
		// cria objeto responsável por fazer conexao com o AWS
		AmazonS3 s3 = new AmazonS3Client(awsCredentials);
	}
}
[/code]

Essa frase é pouco convidativa. Não explica o que voce vai fazer, nem o que o usuário deve esperar. O código é bastante assustador; explicá-lo através de comentários nunca é boa opção. Repare como fica melhor agora:

::Vamos então acessar os serviços da amazon S3. Para começar, certamente precisamos nos identificar de alguma forma. Para se conectar ao sistema, a API é simples: primeiro vamos ler o conteúdo das nossas credenciais, que estão em %%AwsCredentials.properties%%, jogando essa informação dentro de uma classe específica do AWS, chamada %%PropertiesCredentials%%. Com essas informações, instanciamos uma classe que é capaz de se comunicar com o S3, a %%AmazonS3Client%%. Observe o código que realiza essas operações::.

[code java]
InputStream credentials = ConectorDoS3.class.
		getResourceAsStream("AwsCredentials.properties");
PropertiesCredentials awsCredentials = 
		new PropertiesCredentials(credentials);
AmazonS3 s3 = new AmazonS3Client(awsCredentials);
[/code]

O código agora está sem todo o peso da declaração da classe e do %%main%%, o que também facilita bastante. É claro que você deve pensar no contexto: se o livro é para quem nunca viu Java na vida, é importante sim declarar a classe e o %%main%%. No caso de um livro mais avançado, você deve saber bem seu público alvo, para poder decidir quando deve ou não expor códigos inteiros ou apenas snippets. Por regra geral, quanto mais você conseguir quebrar o código e intercalá-lo com frases, melhor.

[section Conclusão]

Mostre primeiro o problema que você quer resolver.

Evite códigos grandes ou que apareçam para só depois serem explicados.

Uso do construtivismo. Você pode ir escrevendo código que não funciona até chegar a versão funcional, se isso vai ajudar a quebrar em mais passos e a fazer com que o próprio leitor raciocine a respeito.
